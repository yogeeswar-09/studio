
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    match /users/{userId} {
      // Allow create if user is signing up (their UID matches document ID)
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow read if user is authenticated and accessing their own document
      allow read: if request.auth != null && request.auth.uid == userId;
      // Allow update if user is authenticated and updating their own document
      allow update: if request.auth != null && request.auth.uid == userId;
      // Deny delete by default unless explicitly needed
      allow delete: if false;
    }

    // Listings Collection
    match /listings/{listingId} {
      // Allow anyone to read listings (for browse, detail pages)
      allow read: if true;
      // Allow create if user is authenticated and the sellerId matches their UID
      allow create: if request.auth != null && request.resource.data.sellerId == request.auth.uid;
      // Allow update if user is authenticated and the sellerId of existing document matches their UID
      allow update: if request.auth != null && resource.data.sellerId == request.auth.uid;
      // Allow delete if user is authenticated and the sellerId of existing document matches their UID
      allow delete: if request.auth != null && resource.data.sellerId == request.auth.uid;
    }

    // Conversations Collection
    match /conversations/{conversationId} {
      // Allow read, create, update if the user is one of the participants
      allow read, create, update: if request.auth != null && request.auth.uid in resource.data.participantUids;
      // Deny delete by default
      allow delete: if false;

      // Messages Subcollection
      match /messages/{messageId} {
        // Allow read and create if the user is authenticated.
        // For stricter read: check if user is part of the parent conversation.
        // For development, allowing any authenticated user to read/create messages in any conversation
        // is simpler, but MUST be tightened for production.
        // This requires a get() call to the parent conversation document to check participantUids,
        // which can be complex. For dev, this is often relaxed:
        allow read, create: if request.auth != null;
        // More secure read (example, costs 1 read op per message list):
        // allow read: if request.auth != null && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantUids.hasAny([request.auth.uid]);
        // More secure create (example):
        // allow create: if request.auth != null && request.auth.uid == request.resource.data.senderId && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantUids.hasAny([request.auth.uid]);

        // Deny update/delete of messages by default
        allow update, delete: if false;
      }
    }
  }
}
